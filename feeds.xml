<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Opennodes RSS]]></title><description><![CDATA[Feeds for opennodes]]></description><link>http://peihsinsu.github.io/opennodes</link><image><url>http://peihsinsu.github.io/opennodes/icon.png</url><title>Opennodes RSS</title><link>http://peihsinsu.github.io/opennodes</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Sun, 26 May 2013 13:36:13 GMT</lastBuildDate><atom:link href="http://peihsinsu.github.io/opennodes/feeds.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Node.js入門]]></title><description><![CDATA[<h1>Basic Node.js</h1>
<p>隨著Node.js的普及，Node.js的教學已經有許多，不論是文章還是電子書，甚至實體書... 本網站學習的目的不在打好Node.js的基礎，而是在分享與介紹常用的各類套件，因此這邊只稍微提一下一些基礎的概念，目的不在求入門的初學者可以快速學會，而是在給寫很久卻迷惘的開發者一個重新複習的機會。</p>
<h2>Install Node</h2>
<p>目前Node.js提供各種版本的實作品，並且提供source code讓高手進行compile的動作，大家可以在這個網址找到相關的安裝程式：</p>
<p><a href="http://nodejs.org">http://nodejs.org</a></p>
<p>這裡就不介紹那種點一點就裝好的過程，我們來看看使用source code compile的步驟(PS:我習慣把node安裝在/opt/node下面，對應到的執行檔會是/opt/node/bin/node)：</p>
<ul>
<li>下載source code: <a href="http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz">http://nodejs.org/dist/v0.10.7/node-v0.10.7.tar.gz</a> (一般官網提供的載點如左所示，需要的話也可以直接使用：<a href="http://nodejs.org/dist">http://nodejs.org/dist</a> ，找看看您需要的版本)</li>
<li>解壓縮<pre><code># tar -xzf node-v0.10.7.tar.gz</code></pre>
</li>
<li>檢查環境與設定<pre><code># cd node-v0.10.7
# configure --prefix=/opt/node</code></pre>
</li>
<li>編譯與安裝<pre><code># make &amp;&amp; make install</code></pre>
</li>
<li>設定環境變數<pre><code># export PATH=/opt/node/bin:$PATH</code></pre>
</li>
</ul>
<p>以上，如果順利的話，你的node.js就安裝好了，可以透過下面指令檢查</p>
<ul>
<li>檢查版本<pre><code># node -v</code></pre>
</li>
<li>檢查安裝路徑<pre><code># which node</code></pre>
</li>
</ul>
<p>如果上面版本與路徑跟您所安裝的相同，那代表大功告成啦！</p>
<h2>NVM</h2>
<p>nvm是一套node.js版本管理的方式，可以在：<a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a> 找到相關的安裝與設定資訊，下面節錄安裝過程：</p>
<pre><code>curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></pre>
<p>使用nvm的方式也不難</p>
<p>安裝node.js 0.8.x版本</p>
<pre><code>nvm install 0.8</code></pre>
<p>使用node.js 0.8版本</p>
<pre><code>nvm use 0.8</code></pre>
<h2>基本概念</h2>
<h3>跟JS很像的(應該說一樣)基本操作</h3>
<p>對於初學JavaScript/Node.js的開發者，尤其是從物件導向語言進入的，特別容易搞錯，記得，function名字不要一樣...</p>
<pre class="code" data-js="basic/000-duplicateFun.js"></pre>

<h3>簡述non-block</h3>
<p>non-block簡單的說就像是不等待回應的併行處理方式，但，他又不是multi-process或multi-thread，而是一心二用的執行方式...<br>一般non-block的片段有個簡單的判斷方式，就是在一段執行程式中被丟到function中被呼叫的程式，通常就是non-block的程式片段...我們一般稱之為callback function。</p>
<pre class="code" data-js="basic/000-nonblock.js"></pre>

<p>執行結果：</p>
<pre><code># node examples/basic/000-nonblock.js
bar...
foo...</code></pre>
<pre class="code" data-js="basic/000-nonblock2.js"></pre>

<p>執行結果：</p>
<pre><code>node examples/basic/000-nonblock2.js
foo...
bar...</code></pre>
<pre class="code" data-js="basic/000-nonblock3.js"></pre>

<p>執行結果：</p>
<pre><code># node examples/basic/000-nonblock3.js
[Mon May 20 2013 17:47:24 GMT+0800 (CST)]Start foo...
[Mon May 20 2013 17:47:24 GMT+0800 (CST)]End foo...
[Mon May 20 2013 17:47:24 GMT+0800 (CST)]Start bar...
[Mon May 20 2013 17:47:24 GMT+0800 (CST)]bar...
[Mon May 20 2013 17:47:24 GMT+0800 (CST)]End bar...
[Mon May 20 2013 17:47:25 GMT+0800 (CST)]foo...</code></pre>
<p>下面是setInterval的展示，每三秒執行一次callback，但是在等待這三瞟的同時，下方的&quot;foo...&quot;已經被執行...</p>
<pre class="code" data-js="basic/000-nonblock4.js"></pre>

<p>執行結果：</p>
<pre><code># node examples/basic/000-nonblock4.js
foo...
bar...
bar...
bar...
(skip...)</code></pre>
<h3>Node.js的循序</h3>
<p>延續剛剛對non-block的自以為是定義，其實一般Node.js的語法還是具備循序的特性，</p>
<pre class="code" data-js="basic/000-sequence.js"></pre>


]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=BasicNodeJS.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=BasicNodeJS.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 10:06:16 GMT</pubDate></item><item><title><![CDATA[迴圈與判斷]]></title><description><![CDATA[<h1>迴圈與判斷</h1>
<h2>for迴圈的用法</h2>
<pre class="code" data-js="basic/003-for2.js"></pre>

<pre class="code" data-js="basic/003-for.js"></pre>


<h2>也可用forEach</h2>
<pre class="code" data-js="basic/003-forEach.js"></pre>


<h2>if判斷</h2>
<pre class="code" data-js="basic/003-if.js"></pre>

<h2>switch</h2>
<p>Node.js同JavaScript，其中針對switch可以接受任何物件型態(JDK6以前只接受int的switch...@@)</p>
<pre class="code" data-js="basic/003-switch.js"></pre>

<h2>while loop</h2>
<pre class="code" data-js="basic/003-while.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=BasicOperation.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=BasicOperation.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 13:25:30 GMT</pubDate></item><item><title><![CDATA[Node.js與環境]]></title><description><![CDATA[<h1>Node.js與環境</h1>
<h2>從環境讀取變數</h2>
<pre class="code" data-js="basic/002-readFromEnv.js"></pre>


<h2>從指令讀取變數</h2>
<pre class="code" data-js="basic/002-readParameter.js"></pre>

<p>Result:</p>
<pre><code># node examples/basic/002-readParameter.js
No input param

# node examples/basic/002-readParameter.js 123
123</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=NodeJSEnv.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=NodeJSEnv.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 13:32:20 GMT</pubDate></item><item><title><![CDATA[FileSystem]]></title><description><![CDATA[<h1>跟IO有關的官方套件</h1>
<h2>fs套件</h2>
<p>fs套件提供讀取檔案系統的一些操作方式，而官方針對操作大多實作了有帶Sync跟沒帶Sync的兩個版本，其中有Sync的function都是屬於同步的操作方式，可以直接回傳值回來，而沒有Sync的function則是會有callback，在callback中接入回傳值，同時也帶入error訊息供判斷。</p>
<pre class="code" data-js="basic/001-readdir.js"></pre>

<pre class="code" data-js="basic/002-readdir.js"></pre>

<pre class="code" data-js="basic/002-readFile.js"></pre>

<pre class="code" data-js="basic/002-deleteFile.js"></pre>

<p>如果是使用沒帶Sync的function，則需要實作callback function來達到操作回傳的內容物件，範例如下：</p>
<pre class="code" data-js="basic/002-readFile2.js"></pre>

<p>另一個好用的function是stat，可以用來檢測某個路徑的檔案或是資料匣的狀態</p>
<pre class="code" data-js="basic/002-testFileExist.js"></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=AboutIO.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=AboutIO.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 13:11:38 GMT</pubDate></item><item><title><![CDATA[Exec]]></title><description><![CDATA[<h1>exec</h1>
<p>下面為使用Node對系統下指令的方式：</p>
<pre><code>// http://nodejs.org/api.html#_child_processes
var sys = require(&#39;sys&#39;)
var exec = require(&#39;child_process&#39;).exec;
var child;

// executes `pwd`
child = exec(&quot;pwd&quot;, function (error, stdout, stderr) {
  sys.print(&#39;stdout: &#39; + stdout);
  sys.print(&#39;stderr: &#39; + stderr);
  if (error !== null) {
    console.log(&#39;exec error: &#39; + error);
  }
});</code></pre>
<pre><code>// or more concisely
var sys = require(&#39;sys&#39;)
var exec = require(&#39;child_process&#39;).exec;
function puts(error, stdout, stderr) { sys.puts(stdout) }
exec(&quot;ls -la&quot;, puts);</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=CmdExec.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=CmdExec.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 05:56:51 GMT</pubDate></item><item><title><![CDATA[Socket]]></title><description><![CDATA[<h1>Socket Programming</h1>
<p>Node.js除了Web上的應用，其針對Socket的支援也相當亮眼...</p>
<pre class="code" data-js="basic/socket/client.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=SocketProgramming.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=SocketProgramming.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 13:37:02 GMT</pubDate></item><item><title><![CDATA[REPL]]></title><description><![CDATA[<h1>Read-Eval-Print-Loop (REPL)</h1>
<p>REPL，全稱：Read-Eval-Print-Loop，關於Node.js的REPL進階應用部份，借用官方網站Documents內的一段程式碼來說明。<br>REPL是一個直譯式互動執行的介面，透過這個介面，您可以打入任何Node.js的程式碼，視窗將在按下Enter時候回覆執行結果。許多腳本語言都有提供類似介面供開發人員測試或執行簡單的程式碼。<br>在此範例中，將會啓動一個Unix的Socket服務端口、一個TCP Socket的服務端口，並在執行視窗也開啓一個stdin的服務窗口，從這三個地方執行的Node程式片斷，都會反應在原執行視窗上...</p>
<pre><code>var net = require(&quot;net&quot;),
    repl = require(&quot;repl&quot;);

connections = 0;

repl.start(&quot;node via stdin&gt; &quot;);

net.createServer(function (socket) {
  connections += 1;
  repl.start(&quot;node via Unix socket&gt; &quot;, socket);
}).listen(&quot;/tmp/node-repl-sock&quot;);

net.createServer(function (socket) {
  connections += 1;
  repl.start(&quot;node via TCP socket&gt; &quot;, socket);
}).listen(5001);</code></pre>
<p>執行此Node程式後，可以telnet該服務位置的5001 port來連接服務，執行如下：<br>原執行視窗/Server:</p>
<pre><code>$ node test.js 
node via stdin&gt;</code></pre>
<p>Client from Local using TCP socket:</p>
<pre><code>$ telnet localhost 5001
Trying 127.0.0.1...
Connected to localhost.
Escape character is &#39;^]&#39;.
node via TCP socket&gt; console.log(&#39;hello&#39;);
undefined
node via TCP socket&gt;</code></pre>
<p>Client from Local using Unix socket:</p>
<pre><code>$ telnet /tmp/node-repl-sock 
Trying /tmp/node-repl-sock...
Connected to (null).
Escape character is &#39;^]&#39;.
node via Unix socket&gt; console.log(&#39;hello&#39;)
undefined
node via Unix socket&gt;</code></pre>
<p>原執行視窗(Server)的回應:</p>
<pre><code>$ node test.js 
node via stdin&gt; hello</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=REPL.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=REPL.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 06:03:51 GMT</pubDate></item><item><title><![CDATA[Closure]]></title><description><![CDATA[<h1>Closure</h1>
<p>引用良葛葛的一段Closure定義：</p>
<p>所謂的Closure，是指一個函式物件（或函式值）在建立時，綁定了當時作用範圍（Scope）下有效的自由變數（Free variable）。所 以支援Closure的語言，必須有支援一級函式（First-class function），建立函式物件並不等於建立Closure，建立函式物件時同時綁定了某個（些）自由變數，該函式物件才稱之為Closure。</p>
<p>下面一個簡單的範例：</p>
<pre><code>var f = function(x,y){
  return x + y;
}

function foo(callback) {
  var a = 1;
  var b = 2;
  callback(a,b);
}

foo(f);</code></pre>
<p>其中function foo()中可以接受一個變數callback，此callback並非一般數值變數，而是可以帶入另一個function的變數，而透過foo中呼叫callback並帶入參數a,b，則可以執行此callback中的內容，此種做法，就是讓javascript的non-block事件得以循序進行？<br>而 f function 則是指派給 f 變數的一個function，在此就可以作為foo function的input，這樣的寫作方式可以讓f作為可reuse的function，但在方便下，也可以這樣寫：</p>
<pre><code>function foo(callback) {
    var a = 1;
    var b = 2;
    callback(a,b);
}

foo(function(x,y){
    return x+y;
});</code></pre>
<p>我們把它改寫成Node.js，讓數值在console可以print出來看結果：</p>
<pre><code>/*file: test.js*/
function foo(callback) {
    var a = 1;
    var b = 2;
    var result = callback(a,b);
    console.log(&#39;Result:&#39;+result);
}

foo(function(x,y){
    return x+y;
});</code></pre>
<p>列印結果：</p>
<pre><code>$node test.js
Result:3</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=Closure.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=Closure.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 05:58:24 GMT</pubDate></item><item><title><![CDATA[JSON操作]]></title><description><![CDATA[<h1>JSON的操作</h1>
<h2>基本語法與概念</h2>
<p>JSON全名為JavaScript Object Notation，其原意是要使用純文字的方式來取代物件導向中的物件，整個JSON物件除基本型別之外分成兩種格式：物件、陣列，其中物件語法結構如下：</p>
<p><img src="http://json.org/object.gif"/></p>
<p>上面圖像表示JSON物件為使用&quot;{&quot;與&quot;}&quot;組成的文字，左右大括弧中間則是包含一個以上的&quot;string:value&quot;，我們稱為key-value pair，其中key必須為string格式，而value則可以為原生型別或是JSON物件(形成階層式的JSON物件)。</p>
<p>而陣列則可以包含著基本型別與JSON物件，其語法結構如下：</p>
<p><img src="http://json.org/array.gif"/></p>
<p>上面圖像表示JSON陣列為&quot;[&quot;與&quot;]&quot;所組成的一串文字，左右中括弧間則是包含一個以上的value，此value可以試原生型別或是JSON物件甚至是JSON陣列。</p>
<h2>JavaScript中的JSON操作</h2>
<p>在JavaScript中，新增一個空的JSON物件可以這樣做：</p>
<pre><code>var json = {};</code></pre>
<p>上面json則為一個空的JSON物件。而當需要在其中增加屬性與其對應的值，可以：</p>
<pre><code>var json = { &quot;key&quot; : &quot;value&quot; };</code></pre>
<p>或是</p>
<pre><code>var json = {};
json.key = &#39;value&#39;;</code></pre>
<p>或是</p>
<pre><code>var json = {};
json[&#39;key&#39;] = &#39;value&#39;;</code></pre>
<p>由上面的例子可以看出，我們可以將JSON物件當做一個真實的物件，然後透過&quot;.&quot;來操作其下的值，也可以使用json[&#39;key&#39;]的操縱陣列的方式來呼叫其下的值，而操作的定義則包含新增與修改。</p>
<pre><code>var json = {};
//新增一個屬性
json.key1 = &quot;value1&quot;;
//修改key1
json.key1 = &quot;value2&quot;;</code></pre>
<p>由此可見，JSON物件是一個可以動態增長的物件，並且可以透過簡單的方式直接操作。</p>
<p>附註：在JSON...嚴格說是JavaScript中，單引號(&#39;&#39;)與雙引號(&quot;&quot;)，代表的事同一件事情，就是隔絕一段文字，所以如果文字中有單引號或雙引號，除了使用跳脫字元，也可以交叉使用單引號或雙引號來代替。</p>
<h2>減少一個node(屬性)</h2>
<p>上面範例已經把新增屬性(我喜歡稱為node)跟更新的方式展示過，但是，如果要刪除一個屬性的話，可以透過delete這個指令動作：</p>
<pre><code>var a = {&quot;aaa&quot;:123, &quot;bbb&quot;:223};
console.log(a); //顯示{ aaa: 123, bbb: 223 }

delete a.aaa;
console.log(a); //顯示{ bbb: 223 }</code></pre>
<p>而如果你操作的是JSON陣列，則可以透過<a href="index.html=page=underscore.html">underscorejs</a>這樣做：</p>
<pre class="code" data-js="basic/json/sample01.js"></pre>

<p>結果：</p>
<pre><code># node examples/basic/json/sample01.js
[ 1, 4, 5, 6 ]</code></pre>
<p>如果複雜一點，當在操作包含JSON物件或不定值的JSON陣列時，可以這樣做：</p>
<pre class="code" data-js="basic/json/sample02.js"></pre>

<p>結果：</p>
<pre><code>node examples/basic/json/sample02.js
Before...
[ { aaa: [ 1, 2, 3 ] }, { bbb: { a: 111, b: 222 } } ]
After...
[ { bbb: { a: 111, b: 222 } } ]</code></pre>
<p>以上，感謝underscore的作者，太佛心來著的～！</p>
<h2>node可以是function，而且可以操作</h2>
<p>我本身常用JSON來做另一件事情...整理測試code...，可以把一些測試function寫在一支json下面，然後最後透過指令列參數來動態帶入要執行的function是哪一個...</p>
<pre><code>//整理測試範例
var dbo = {
  create : function(){
    //do create
  },
  query : function(){
    //do query
  },
  delete : function(){
    //do delete
  },
  update: function(){
    //do update
  }
}

//執行測試
dbo[process.argv[2]]();</code></pre>
<p>而執行上面的程式只要：</p>
<pre><code># node test.js create</code></pre>
<p>想測試update的時候，可以把create換成update就好...</p>
<p>由上面的範例可知，如果希望組織您的code變成階層式的語意，例如在Java中的System.out.println這樣的一個function，則可以這樣寫：</p>
<pre><code>var System = {
  out: {
    println: function(msg) {
      console.log(msg);
    }
  }
}

//則程式可以這樣呼叫
System.out.println(&#39;HELLO!&#39;);</code></pre>
<p>語意的部份，見仁見智，一般好解讀的程式會更吸引開發者使用喔！</p>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=JsonOperate.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=JsonOperate.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 15:37:07 GMT</pubDate></item><item><title><![CDATA[學習資源介紹]]></title><description><![CDATA[<h1>學習資源介紹</h1>
<h2>官方網站</h2>
<ul>
<li>NodeJS官網，提供作者的教學與原廠文件資訊: <a href="http://nodejs.org">http://nodejs.org</a></li>
</ul>
<h2>台灣官方網站</h2>
<ul>
<li>NodeJS.tw為台灣官網，提供相當多的學習資源與討論: <a href="http://nodejs.tw">http://nodejs.tw</a></li>
<li>由NodeJS.tw官方夥伴編輯的第一本Node.js中文電子書：<a href="http://book.nodejs.tw/">http://book.nodejs.tw/</a></li>
</ul>
<h2>Node.js相關文件</h2>
<ul>
<li>Node線上論壇：<a href="http://groups.google.com/group/nodejs/browse_thread/thread/e213b94e43df60ab">http://groups.google.com/group/nodejs/browse_thread/thread/e213b94e43df60ab</a></li>
<li>Dreamer&#39;s Lab(有詳盡的Node與Javascript的教學)：<a href="http://dreamerslab.com/blog/tw/node-js-basics/">http://dreamerslab.com/blog/tw/node-js-basics/</a></li>
</ul>
<h2>JavaScript相關文件</h2>
<ul>
<li>良葛葛的JavaScript筆記：<a href="http://caterpillar.onlyfun.net/Gossip/JavaScript/Closure.html">http://caterpillar.onlyfun.net/Gossip/JavaScript/Closure.html</a></li>
<li>小爪哇的初發(JavaScript相關)：<a href="http://ace33022.blogspot.com/2010/10/javascript.html">http://ace33022.blogspot.com/2010/10/javascript.html</a></li>
<li>Javascript Kit: <a href="http://www.javascriptkit.com/javatutors/rfunction2.shtml">http://www.javascriptkit.com/javatutors/rfunction2.shtml</a></li>
</ul>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=NodeJSResource.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=NodeJSResource.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 10:11:24 GMT</pubDate></item><item><title><![CDATA[request]]></title><description><![CDATA[<h1>request module</h1>
<p>request是一套實作http/https模組的http(s) client module，透過該套件可以快速的進行</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="request" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install request</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="request/sample01.js"></pre>

<pre class="code" data-js="request/sample02.js"></pre>

<pre class="code" data-js="request/sample03.js"></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=request.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=request.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 13:40:21 GMT</pubDate></item><item><title><![CDATA[restify]]></title><description><![CDATA[<h1>restify module</h1>
<h2>Github Repository</h2>
<p><a href="http://mcavage.github.com/node-restify">http://mcavage.github.com/node-restify</a></p>
<h2>Installation</h2>
<pre><code>npm install restify</code></pre>
<h2>Sample Usage</h2>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=restify.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=restify.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 02:53:32 GMT</pubDate></item><item><title><![CDATA[restClient]]></title><description><![CDATA[<h1>restClient</h1>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=restClient.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=restClient.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Sat, 25 May 2013 05:39:00 GMT</pubDate></item><item><title><![CDATA[connect]]></title><description><![CDATA[<h1>connect</h1>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=connect.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=connect.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Sat, 25 May 2013 05:39:19 GMT</pubDate></item><item><title><![CDATA[soap]]></title><description><![CDATA[<h1>soap</h1>
<p>這個套件是Node.js提供來連接SOAP Web Service的</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="soap" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install request</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="soap/sample01.js"></pre>

<p>下面為ITRI提供的TTS服務連線實作(PS:以下範例只到第一層連線)</p>
<pre class="code" data-js="soap/sample02.js"></pre>

<p>Result:</p>
<pre><code># node examples/soap/sample02.js
{ Result: &#39;0&amp;success&amp;338658&#39; }</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=soap.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=soap.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 08:50:13 GMT</pubDate></item><item><title><![CDATA[step]]></title><description><![CDATA[<h1>step module</h1>
<p>step模組是Node.js使用來達成循序操縱的一個方式，使用的操作方式較為直覺，唯一需要注意的地方是function內的參數scope及其傳遞的方式。</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="step" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install step</code></pre>
<h2>Sample Usage</h2>
<p>簡單的順序範例</p>
<pre class="code" data-js="step/test-step.js"></pre>

<p>有Callback的時候，也可以順利的執行</p>
<pre class="code" data-js="step/test-step2.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=step.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=step.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 03:46:37 GMT</pubDate></item><item><title><![CDATA[node-promise]]></title><description><![CDATA[<h1>promise module</h1>
<p>promise模組是Node.js使用來達成循序操縱的一個方式，不過...說實在的，這個套件我還不是很懂他的操作方式，下面列出的範例，大家可以參考就好，</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="promise" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install node-promise</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="node-promise/test-promise.js"></pre>

<p>Result:</p>
<pre><code>&gt;&gt;1
&gt;&gt;2
&lt;!doctype html&gt;&lt;html itemscope=&quot;itemscope&quot; itemtyp</code></pre>
<pre class="code" data-js="node-promise/test-promise2.js"></pre>

<p>Result:</p>
<pre><code>&gt;&gt;1
&gt;&gt;2
&lt;!doctype html&gt;&lt;html itemscope=&quot;itemscope&quot; itemtyp</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=node-promise.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=node-promise.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 03:17:40 GMT</pubDate></item><item><title><![CDATA[q]]></title><description><![CDATA[<h1>q</h1>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=q.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=q.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Sat, 25 May 2013 05:39:35 GMT</pubDate></item><item><title><![CDATA[Express]]></title><description><![CDATA[<h1>Express</h1>
<p>Express是一套Node.js的Web Framework，以EJS或Jade(或其他)為View Engine將Node.js的MVC做一個完整的封裝，學Node.js的朋友不能錯過！</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="express" data-show="version,dependencies"></div>

<h2>Installation</h2>
<p>一般安裝Express時，我們會需要使用到其下的CLI工具來產生專案，所以需要帶入-g的參數來安裝到環境中。</p>
<pre><code>npm install express -g</code></pre>
<h2>Sample Usage</h2>
<p>使用express來產生專案</p>
<pre><code>express [專案名稱] &amp;&amp; cd [專案名稱] &amp;&amp; npm install</code></pre>
<p>上面指令使用&amp;&amp;是Linux來串接指令的方式，原則上上面有三個指令</p>
<ul>
<li>express [專案名稱]: 使用express指令來產生某個專案</li>
<li>cd [專案名稱]: 切換到該專案資料夾下</li>
<li>npm install: 特該專案將相依的package進行安裝</li>
</ul>
<h3>以下為實際執行範例</h3>
<pre><code>$ express ExpressPrj
create : ExpressPrj
create : ExpressPrj/package.json
create : ExpressPrj/app.js
create : ExpressPrj/views
create : ExpressPrj/views/layout.jade
create : ExpressPrj/views/index.jade
create : ExpressPrj/routes
create : ExpressPrj/routes/index.js
create : ExpressPrj/public
create : ExpressPrj/public/stylesheets
create : ExpressPrj/public/stylesheets/style.css
create : ExpressPrj/public/javascripts
create : ExpressPrj/public/images
dont forget to install dependencies:
$ cd ExpressPrj &amp;&amp; npm install</code></pre>
<p>上面指令完成後，會產生一個以剛剛給定的名稱的資料匣，express預設以jade作為view engine，在此需要修改一些設定方可使用express之ejs作為view engine，目前專案的檔案結構說明如下：</p>
<ul>
<li>app.js: 實際主程式進入點</li>
<li>package.json: 專案定義檔，含一些版本資訊</li>
<li>public: 置放靜態檔案處，如javascript, css, image, html檔案等資料</li>
<li>view: view engine主要讀取資料匣，包含jade的頁面程式，簡單說就是node.js的server端程式位置</li>
<li>routes: 預設放置專案中router之位置，並且透過export提供給專案載入使用</li>
</ul>
<p>修改app.js檔案，增加使用ejs的定義</p>
<ul>
<li>首先修改configure區段：</li>
</ul>
<pre><code>app.configure(function(){
  app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
  app.set(&#39;view engine&#39;, &#39;ejs&#39;);
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(express.session({ secret: &quot;keyboard cat&quot; }));
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(__dirname + &#39;/public&#39;));
  app.set(&quot;view options&quot;, {layout : true});
});</code></pre>
<ul>
<li>如果希望讓ejs用其他的副檔名，則可以參考下面設定：</li>
</ul>
<pre><code>app.set(&quot;view engine&quot;, &quot;html&quot;);
app.set(&quot;views&quot;, __dirname + &#39;/views&#39;);
app.register(&quot;html&quot;, ejs);</code></pre>
<ul>
<li>然後移除：app.get(&#39;/&#39;, routes.index);</li>
<li>增加app.get()如下：</li>
</ul>
<pre><code>app.get(&#39;/&#39;, function(req, res){
  res.render(&#39;index&#39;, {
    title: &#39;Express&#39;
  });
});</code></pre>
<ul>
<li>在view之下新增layout.ejs檔案(express預設會找尋view下的layout.ejs作為樣板render頁面)</li>
</ul>
<pre class="code" data-js="express/index.html"></pre>


<ul>
<li>如欲使用其他樣板，可在router處增加額外樣板資訊 ：</li>
</ul>
<pre><code>app.get(&#39;/&#39;, function(req, res){
  res.render(&#39;index&#39;, {
    layout:&#39;layout2&#39;,
    title: &#39;Express&#39;
  });
});</code></pre>
<ul>
<li>在view下新增index.ejs檔案：</li>
</ul>
<pre><code class="language-html">&lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt; 
&lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;</code></pre>
<ul>
<li>啓動server：<br>(首先開啓終端機，進入專案資料匣...)</li>
</ul>
<pre><code># node app.js</code></pre>
<ul>
<li>檢視執行狀況： <a href="http://localhost:3000">http://localhost:3000</a></li>
</ul>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=Express.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=Express.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Tue, 21 May 2013 02:01:38 GMT</pubDate></item><item><title><![CDATA[domain]]></title><description><![CDATA[<h1>domain</h1>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="domain" data-show="version,dependencies"></div>


<h2>Github Repository</h2>
<p><a href="htps:////github.com/brighthas/node-cqrs.git">NPM Repository資訊</a></p>
<h2>Sample</h2>
<pre class="code" data-js="domain/domainExample.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=domain.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=domain.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 05:06:39 GMT</pubDate></item><item><title><![CDATA[native-dns]]></title><description><![CDATA[<h1>native-dns</h1>
<p>想建立一套強韌的DNS系統嗎，用Node.js也可以喔！native-dns是一個實作dns協定的工具包，提供你呼叫dns server以及當做dns server的方式，透過此套件，寫一個dns server是輕而易舉的事喔！</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="native-dns" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install native-dns</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="native-dns/sample01.js"></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=native-dns.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=native-dns.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 05:21:08 GMT</pubDate></item><item><title><![CDATA[nodemailer]]></title><description><![CDATA[<h1>nodemailer</h1>
<p>nodemailer</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="nodemailer" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install nodemailer</code></pre>
<h2>Sample Usage</h2>
<p>官網的操作說明：</p>
<pre class="code" data-js="nodemailer/sample01.js"></pre>

<p>範例：</p>
<pre class="code" data-js="nodemailer/test-nmail.js"></pre>

<p>樣板；</p>
<pre class="code" data-js="nodemailer/test-nmail.tpl"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=nodemailer.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=nodemailer.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 05:32:07 GMT</pubDate></item><item><title><![CDATA[json]]></title><description><![CDATA[<h1>json</h1>
<h2>說明</h2>
<p>提供指令列模式操作json的排版及物件操作方式</p>
<h2>Github Repository</h2>
<ul>
<li>官方參考資料：<a href="http://peihsinsu.github.io/opennodes/html/../node_modules/json/README.html">README.md</a></li>
<li>官方Github：<a href="https://github.com/zpoley/json-command.git">Github repository</a></li>
</ul>
<h2>Installation</h2>
<pre><code># npm install json -g</code></pre>
<h2>範例</h2>
<p>Sample execute:</p>
<pre><code>curl http://search.twitter.com/search.json?q=node.js | json</code></pre>
<p>Sample output:</p>
<pre><code> curl http://search.twitter.com/search.json?q=node.js | json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 12566  100 12566    0     0  24705      0 --:--:-- --:--:-- --:--:-- 36423
{
  &quot;completed_in&quot;: 0.03,
  &quot;max_id&quot;: 335659522125336600,
  &quot;max_id_str&quot;: &quot;335659522125336576&quot;,
  &quot;next_page&quot;: &quot;?page=2&amp;max_id=335659522125336576&amp;q=node.js&quot;,
  &quot;page&quot;: 1,
  &quot;query&quot;: &quot;node.js&quot;,
  &quot;refresh_url&quot;: &quot;?since_id=335659522125336576&amp;q=node.js&quot;,
  &quot;results&quot;: [
    {
      &quot;created_at&quot;: &quot;Sat, 18 May 2013 07:34:00 +0000&quot;,
      &quot;from_user&quot;: &quot;NewsNodejs&quot;,
      &quot;from_user_id&quot;: 486450041,
      &quot;from_user_id_str&quot;: &quot;486450041&quot;,
      &quot;from_user_name&quot;: &quot;nodejs-news&quot;,
      &quot;geo&quot;: null,
      &quot;id&quot;: 335659522125336600,
      &quot;id_str&quot;: &quot;335659522125336576&quot;,
      &quot;iso_language_code&quot;: &quot;en&quot;,
      &quot;metadata&quot;: {
        &quot;result_type&quot;: &quot;recent&quot;
      },
      &quot;profile_image_url&quot;: &quot;http://a0.twimg.com/profile_images/1812607216/nodejs-news_normal.png&quot;,
      &quot;profile_image_url_https&quot;: &quot;https://si0.twimg.com/profile_images/1812607216/nodejs-news_normal.png&quot;,
      &quot;source&quot;: &quot;&amp;lt;a href=&amp;quot;http://nodejs-news.com&amp;quot;&amp;gt;dashboard-stream&amp;lt;/a&amp;gt;&quot;,
      &quot;text&quot;: &quot;How We Built eBay’s First Node.js Application #nodejs #ebays http://t.co/izNKJ7kcLT&quot;
    },
    ...
  ],
  &quot;results_per_page&quot;: 15,
  &quot;since_id&quot;: 0,
  &quot;since_id_str&quot;: &quot;0&quot;
}</code></pre>
<p>Sample Controll JSON Object:</p>
<pre><code># curl -sS http://search.twitter.com/search.json?q=node.js | json results_per_page
{
  &quot;results_per_page&quot;: 15
}</code></pre>
<p>Sample Operation for Json within Array:</p>
<pre><code># curl -sS http://search.twitter.com/search.json?q=node.js | json results[0]
{
  &quot;results&quot;: [
    {
      &quot;created_at&quot;: &quot;Sat, 18 May 2013 07:38:42 +0000&quot;,
      &quot;from_user&quot;: &quot;maxmilovanov&quot;,
      &quot;from_user_id&quot;: 45791733,
      &quot;from_user_id_str&quot;: &quot;45791733&quot;,
      &quot;from_user_name&quot;: &quot;Максим Милованов&quot;,
      &quot;geo&quot;: null,
      &quot;id&quot;: 335660703245561860,
      &quot;id_str&quot;: &quot;335660703245561856&quot;,
      &quot;iso_language_code&quot;: &quot;en&quot;,
      &quot;metadata&quot;: {
        &quot;result_type&quot;: &quot;recent&quot;
      },
      &quot;profile_image_url&quot;: &quot;http://a0.twimg.com/profile_images/268832122/i_normal.jpg&quot;,
      &quot;profile_image_url_https&quot;: &quot;https://si0.twimg.com/profile_images/268832122/i_normal.jpg&quot;,
      &quot;source&quot;: &quot;&amp;lt;a href=&amp;quot;http://twitter.com/&amp;quot;&amp;gt;web&amp;lt;/a&amp;gt;&quot;,
      &quot;text&quot;: &quot;@nodejs Why #Myspace is not in the list of those who use node.js?&quot;,
      &quot;to_user&quot;: &quot;nodejs&quot;,
      &quot;to_user_id&quot;: 91985735,
      &quot;to_user_id_str&quot;: &quot;91985735&quot;,
      &quot;to_user_name&quot;: &quot;node js&quot;
    }
  ]
}</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=json.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=json.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 02:53:32 GMT</pubDate></item><item><title><![CDATA[underscore]]></title><description><![CDATA[<h1>underscore module</h1>
<p>相當完整的工具包，包含有常用的Collection, Array, Function, Object...的操作，而且可以是用於前端js，熟悉他的話，開發工作可以事半功倍喔！</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="underscore" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install underscore</code></pre>
<h2>Sample Usage</h2>
<p>參考官網文件：<a href="http://underscorejs.org/">http://underscorejs.org/</a></p>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=underscore.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=underscore.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 03:47:59 GMT</pubDate></item><item><title><![CDATA[node-uuid]]></title><description><![CDATA[<h1>node-uuid</h1>
<p>Node.js套件中，幫忙產生類似&#39;02a2ce90-1432-11e1-8558-0b488e4fc115&#39;這樣字串的工具，提供兩種產生方式：1.時間序列方式產出，2.亂數產出。</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="node-uuid" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install node-uuid</code></pre>
<h2>Sample Usage</h2>
<p>最簡單的建立方式：</p>
<pre class="code" data-js="node-uuid/sample01.js"></pre>

<p>可以針對建立的過程添加一些參數，讓亂數...更亂一些...</p>
<pre class="code" data-js="node-uuid/sample02.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=node-uuid.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=node-uuid.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 08:56:56 GMT</pubDate></item><item><title><![CDATA[noder]]></title><description><![CDATA[<h1>noder</h1>
<p>noder是一套簡易的HTTP Server，透過指令列啟動該服務後，執行之資料夾以下的檔案則可以透過HTTP的方式存取，可以當做測試HTML, CSS時使用。</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="noder" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install noder -g</code></pre>
<p>noder提供了下面操作：</p>
<pre><code># noder --help

  Usage: noder [options]

  Options:

    -h, --help                     output usage information
    -V, --version                  output the version number
    -i, --host address &lt;ip&gt;        Specific host, like 192.168.1.1, default is all ip listened
    -p, --port &lt;port&gt;              Specific port, like 80,3000,8080, default is 1337
    -l, --loglevel &lt;loglevel&gt;      Specific log level, generally like: FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    -a, --allow &lt;allow file type&gt;  Specific the allowed file types that seprate by &quot;,&quot;, default is all
    -d, --deny &lt;deny file type&gt;    Specific the denied file types that seprate by &quot;,&quot;, default is none</code></pre>
<h2>Sample Usage</h2>
<pre><code> SimonAIR in ~/project/opennodes
± |gh-pages ✗| → noder
[2013-05-22 18:34:09.639] [INFO] [default] - Noder version: 0.0.7
[2013-05-22 18:34:09.641] [INFO] [default] - Server running at http://127.0.0.1:1337/
[2013-05-22 18:34:09.642] [INFO] [default] - Using log level: INFO (If you want to change, try &quot;export LOV_LEVEL=INFO&quot; in linux or &quot;set LOG_LEVEL=INFO&quot; in windows)</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=noder.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=noder.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 10:37:51 GMT</pubDate></item><item><title><![CDATA[commander]]></title><description><![CDATA[<h1>commander</h1>
<p>commander是一套讓建立Node.js CLI(Command Line Interface)更快速的方法，讓使用者可以更快速且更彈性的抓取command line的參數，也提供預設的help page，讓需要寫指令模式的開發者更方便！</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="commander" data-show="version,dependencies,repository"></div>

<h2>Installation</h2>
<pre><code>npm install request</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="commander/test-commander.js"></pre>

<p>Result:</p>
<pre><code># node examples/commander/test-commander.js
you ordered a pizza with:
  - marble cheese

# node examples/commander/test-commander.js -P 123
you ordered a pizza with:
  - pineappe
  - marble cheese</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=commander.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=commander.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 05:05:01 GMT</pubDate></item><item><title><![CDATA[cradle]]></title><description><![CDATA[<h1>cradle</h1>
<p>cradle是一套Apache準備給CouchDB的Node.js套件，透過該套件可以直接完全的存取CouchDB上的資源。</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="cradle" data-show="version,dependencies"></div>

<h2>Installation</h2>
<pre><code>npm install cradle</code></pre>
<h2>Sample Usage</h2>
<pre class="code" data-js="cradle/dbmanager.js"></pre>

<p>使用dbmanager來進行實際執行動作</p>
<pre class="code" data-js="cradle/test.js"></pre>

<p>執行範例：</p>
<p>執行test code的方法如下，注意：參數部分直接輸入test.js中script的key值即可(代表取出該值代表的function做執行的動作)</p>
<pre><code># node examples/cradle/test.js c1</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=cradle.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=cradle.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Tue, 21 May 2013 01:23:00 GMT</pubDate></item><item><title><![CDATA[riak-js]]></title><description><![CDATA[<h1>riak-js</h1>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="riak-js" data-show="version,dependencies"></div>

<h2>先介紹安裝Riak...</h2>
<p>原始碼安裝方式：自Basho下載Riak套件原始碼，然後解壓縮進行make，如果正確make之後，則會在資料匣內產生rel檔案匣，裡面會有riak資料匣，此為編譯後之位置所在。</p>
<pre><code>curl -O http://downloads.basho.com/riak/riak-1.0.2/riak-1.0.2.tar.gz
tar zxvf riak-1.0.2.tar.gz
cd riak-1.0.2
make rel</code></pre>
<p>啓動Riak服務：安裝好的riak可透過$RIAK_HOME/bin/riak來作啓動與關閉</p>
<pre><code>riak start</code></pre>
<p>檢視riak server狀態</p>
<pre><code>riak ping
&gt;pong</code></pre>
<p>連線進入riak console</p>
<pre><code>riak console
(OR riak attach)</code></pre>
<p>測試安裝好的Riak：預設安裝好的</p>
<pre><code>curl -v http://127.0.0.1:8098/riak/test</code></pre>
<h2>安裝Riak.js</h2>
<pre><code>npm install riak-js -g</code></pre>
<h2>Sample</h2>
<p>第一個Riak.js程式</p>
<pre class="code" data-js="riak-js/sample01.js"></pre>

<p>執行與顯示</p>
<pre><code>#node /tmp/test.js 
[ { meta: 
     { bucket: &#39;airlines&#39;,
       key: &#39;KLM&#39;,
       vclock: &#39;a85hYGBgzGDKBVIcypz/fvoLt6/MYEpkzmNlOKbecYIvCwA=&#39; },
    data: { fleet: 111, country: &#39;NL&#39; } },
  { meta: 
     { bucket: &#39;airlines&#39;,
       key: &#39;KLM2&#39;,
       vclock: &#39;a85hYGBgzGDKBVIcypz/fvoLt6/KYEpkzGNl+KzecYIvCwA=&#39; },
    data: { fleet: 111, country: &#39;NL&#39; } } ]</code></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=riak-js.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=riak-js.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 08:45:24 GMT</pubDate></item><item><title><![CDATA[mysql]]></title><description><![CDATA[<h1>MySQL</h1>
<h2>簡介</h2>
<p>非常常用的套件，也是簡單易懂... 連線＋查詢...解決</p>
<h2>Installation</h2>
<pre><code># npm install mysql</code></pre>
<h2>Sample</h2>
<p>這個是建立連線的例子，因為mysql套件曾經有幾個改版有影響到connection的建立方式，目前使用這樣的判斷可以比較安全的建立連線...</p>
<pre class="code" data-js="mysql/mysql-config.js"></pre>

<p>而任何的SQL在此套件內都是使用query這個function即可達成，作者封裝insert, update, delete, select甚至exec等指令到同一個function，讓操作相當簡單...</p>
<pre class="code" data-js="mysql/mysql-example.js"></pre>]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=mysql.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=mysql.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Mon, 20 May 2013 02:53:32 GMT</pubDate></item><item><title><![CDATA[smartdc]]></title><description><![CDATA[<h1>smartdc module</h1>
<p>smartdc是一套Joyent原廠提供連線Joyent Cloud Platform - SmartDataCenter的套件，裡面提供CLI與node.js的操作方法，可以直接與cloudapi進行溝通，並且達到管理cloud machine相關的動作。</p>
<h2>套件資訊</h2>
<div class="pkginfo" data-module-name="smartdc" data-show="version,dependencies"></div>

<h2>Installation</h2>
<p>安裝上，因為要預設把CLI也安裝到環境變數，所以加上&quot;-g&quot;參數，讓npm將CLI tools發佈在環境變數上。</p>
<pre><code>npm install smartdc -g</code></pre>
<p>安裝完後，你將會得到下面的指令：</p>
<pre><code>sdc-addmachinetags            sdc-getdataset                sdc-listmachines
sdc-createinstrumentation     sdc-getinstrumentation        sdc-listmachinesnapshots
sdc-createkey                 sdc-getkey                    sdc-listmachinetags
sdc-createmachine             sdc-getmachine                sdc-listpackages
sdc-createmachinesnapshot     sdc-getmachinemetadata        sdc-rebootmachine
sdc-deleteinstrumentation     sdc-getmachinesnapshot        sdc-resizemachine
sdc-deletekey                 sdc-getmachinetag             sdc-setup
sdc-deletemachine             sdc-getpackage                sdc-startmachine
sdc-deletemachinemetadata     sdc-listdatacenters           sdc-startmachinefromsnapshot
sdc-deletemachinesnapshot     sdc-listdatasets              sdc-stopmachine
sdc-deletemachinetag          sdc-listinstrumentations      sdc-updatemachinemetadata
sdc-describeanalytics         sdc-listkeys</code></pre>
<p>關於smartdc官方的文件，請參考：<a href="http://sdcdoc.joyent.com/sdcdoc/display/sdc/API+Documentation">http://sdcdoc.joyent.com/sdcdoc/display/sdc/API+Documentation</a></p>
<h2>Sample Usage</h2>
<pre class="code" data-js="smartdc/test-smartdc.js"></pre>
]]></description><link>http://peihsinsu.github.io/opennodes/wiki/index.html?page=smartdc.md</link><guid isPermaLink="false">http://peihsinsu.github.io/opennodes/wiki/index.html?page=smartdc.md</guid><dc:creator><![CDATA[Opennodes]]></dc:creator><pubDate>Wed, 22 May 2013 08:30:07 GMT</pubDate></item></channel></rss>